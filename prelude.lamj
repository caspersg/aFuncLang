# start prelude

xor=
  a: b: or (and a (not b)) (and (not a) b)

implies=
  a: b: or (not a) b

equivilant=
  a: b: not (xor a b)

# an alternative implementation for basic algebra
or=
  _: b: b
  a: b: a

not=
  _: true
  x: false

and=
  _: b: false
  a:
    _: false
    b: true

#lisp list definition
#(define (cons x y)
#  (lambda (m) (m x y)))
#(define (car z)
#  (z (lambda (p q) p)))
#(define (cdr z)
#  (z (lambda (p q) q)))

cons =
  x: y: m: m x y
head =
  z: z (p: q: p)
tail =
  z: z (p: q: q)


# some combinators
B = x:y:z: x (y z)
B1 = x:y:z:w: x (y z w)
B2 = x:y:z:w:v: x (y z w v)
B3 = x:y:z:w: x (y (z w))
C = x:y:z: x z y
D = x:y:z:w: x y (z w)
D1 = x:y:z:w:v: x y z (w v)
D2 = x:y:z:w:v: x (y z) (w v)
E = x:y:z:w:v: x y (z w v)
E1 = x:y1:y2:y3:z1:z2:z3: x (y1 y2 y3) (z1 z2 z3)
F = x:y:z: z y x
G = x:y:z:w: x w (y z)
H = x:y:z: x y z y
HE = x: HE
I = x: x
J = x:y:z:w: x y (x w z)
K = x:y: x
L = x:y: x (y y)
M = x: x x
O = x:y: y (x y)
Q = x:y:z: y (x z)
Q1 = x:y:z: x (z y)
Q2 = x:y:z: y (z x)
Q3 = x:y:z: z (x y)
Q4 = x:y:z: z (y x)
R = x:y:z: y z x
S1 = x: x (S1 x)
S = x:y:z: x z (y z)
T = x:y: y x
U = x:y: y (x x y)
V = x:y:z: z x y
W = x:y: x y y
W1 = x:y: y x x
# C*
C1R = x:y:z:w: x y w z
# C**
C2R = x:y:z:w:v: x y z v w
# W*
W1R = x:y:z: x y z z
# W**
W2R = x:y:z:w: x y z w w


# derived from B
D = B B
E = B (B B B)
# derived from B and T
R = B B T
C = R R R
F = E T T E T
V = B C T
Q = C B
Q1 = B C B
Q3 = B T
G = B B C
# derived from B T M
# double mockingbird
DM = B M
L = Q M
W = C (B M R)
W1 = C W
H = B W (B C)
S = B W1R G
O = Q Q W
U = L O
# derived starred birds
C1R = B C
C2R = B C1R
W1R = B W
W2R = B W1R


# longer descriptive names
Bluebird = B
Blackbird = B1
Buntings = B2
Becard = B3
Cardinal = C
Dove = D
Dickcissel = D1
Dovekies = D2
Eagle = E
BaldEagle = E1
Finch = F
Goldfinch = G
Hummingbird = H
Identity = I
Jay = J
Kestrel = K
Lark = L
Mockingbird = M
Owl = O
QueerBird = Q
QuixoticBird = Q1
QuizzicalBird = Q2
QuirkyBird = Q3
QuakyBird = Q4
Robin = R
SageBird = S1
Starling = S
Thrush = T
TuringBird = U
Vireo = V
Warbler = W
ConverseWarbler = W1
HopelesslyEgocentric = HE
CardinalOnceRemoved = C1R
CardinalTwiceRemoved = C2R
WarblerOnceRemoved = C1R
WarblerTwiceRemoved = W1R

# traditional names
compose = B
identity = I

# haskell map
#map f = foldr ((:) . f) []

map=
  f: foldr (compose cons f) _


# haskell fold
#foldl f z []     = z
#foldl f z (x:xs) = foldl f (f z x) xs

foldl=
  f:
    z:
      _: z
      l: foldl f (f z (head l)) (tail l)

#foldr f z []     = z
#foldr f z (x:xs) = f x (foldr f z xs)
foldr=
  f:
    z:
      _: z
      l: f (head l) (foldr f z (tail l))

# haskell filter
#filter :: (a -> Bool) -> [a] -> [a]
# filter _ []                 = []
# filter p (x:xs) | p x       = x : filter p xs
#                 | otherwise = filter p xs
filter=
  p:
    _:_
    {l: p (head l)}: cons (head l) (filter p (tail l))
    l: filter p (tail l)

# lisp append
# (define append
#   (lambda (a b)
#      (fold-right cons b a)))
# haskell append
#append :: [a] -> [a] -> [a]
#append xs ys = foldr (:) ys xs
append=
  xs: ys: foldr cons ys xs

# haskell concat
#concat :: [[a]] -> [a]
#concat xs = build (\c n -> foldr (\x y -> foldr c y x) n xs)
# scala flatmap (same as haskell concatMap)
#def flatMap[A, B](list: List[A])(f: A => List[B]): List[B] = list match {
#  case (x::xs) => f(x) ++ flatMap(xs)(f)
#  case _ => Nil
#}
concat=
  _: _
  l: append (head l) (concat (tail l))

# alternative filter' p xs = foldr (\x xs -> if p x then x : xs else xs) [] xs
filter=
  p: 
    test= 
      {x: p x}: xs: cons x xs
      x: xs: xs
    foldr test _

last=
  _:_
  {l: equal (tail l) _}: head l
  l: last (tail l)

# any in terms of filter
any=
  p:
    _: false
    {l: p (head l)}: true
    l: filter p (tail l)

# any in terms of foldr
any=
  p:
    test= 
      {x: p x}: xs: or x xs
      x: xs: false
    foldr test true

all=
  p:
    test= 
      {x: p x}: xs: and x xs
      x: xs: false
    foldr test true


listM= :_

# monads
# List monad
#  // unit :: a -> [a]
listM_unit= x: cons x _

# // bind :: (a -> [a]) -> ([a] -> [a])
listM_bind=
  f: l: concat (map f l)

#maybe
nothing=
  "isJust": false
  "fromJust": _
just=
  a: 
    "isJust": true
    "fromJust": a

maybeM_unit= x: just x

maybeM_bind=
  f:
    {x: x "isJust"}: just (f (x "fromJust"))
    n: nothing

# curry some useful javascript functions
assertEqual = actual: expected: (curry assert.equal) actual expected _
# maths
add = curry jsPlus
subtract = curry jsMinus
multiply = curry jsMultiply
divide = curry jsDivide
modulus = curry jsModulus
min = curry Math.min
max = curry Math.max
pow = curry Math.pow
# comparison
lessThan = curry jsLessThan
lessThanEqual = curry jsLessThanEqual
equal = curry jsEqual
greaterThan = not lessThanEqual
greaterThanEqual = not lessThan

keys =
  o: map (x: x) (o "keys")

values =
  o: map (x: o x) (keys o)
